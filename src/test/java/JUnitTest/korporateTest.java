/**
* указываем на то, что класс принадлежит пакету 
*/
package JUnitTest;

/**
*импортируем классы из библиотеки junit 
*/
import static org.junit.Assert.*; 

/**
* Импортируем класс для создания метода который будет выполняться после каждого тестирования 
*/
import org.junit.After; 
/**
* Импортируем класс для создания метода который будет выполняться до каждого тестирования 
*/
import org.junit.Before; 
/**
* Импортируем класс для создания теста 
*/
import org.junit.Test; 
/**
* Импортируем класс для получения нашего результата 
*/
import org.junit.runner.JUnitCore; 
/**
* Импортируем класс для вывода результата 
*/
import org.junit.runner.Result; 

/**
* импортируем класс 
*/
import Calc.korporateCalc; 

/**
*описываем класс 
*/
public class korporateTest {
/**
*указываем на класс для тестирования 
*/
	private korporateCalc test;
	
	@Before
    /**
* указываем на то, что метод будет выполнятся перед каждым тестируемым методом 
*/
	public void init() { test = new korporateCalc(); } 
	
    @After
    /**
* указываем на то, что метод будет выполнятся после каждого тестируемого метода  
*/
    public void tearDown() { test = null; } 
    
    @Test
	/**
* создаём метод для теста 
*/
    public void testGet(){ 
	/**
* тестируемый класс 
*/
    	test = new korporateCalc(); 
		/**
* Проводим верный тест для входных значений время работы 24 часа, время хранения данных 7 дней, количество камер 2, формат сжатия 0.9, разрешение камеры 1,1 мб в секунду и предполагаемым результатом 1169.44 
*/
    	assertEquals("1169.44",test.getP(7, 2, 24, 0.9, 1.1)); 
	 }
    
  /**
*указываем на класс для тестирования	 
*/
    private korporateCalc test1;
	
	@Before
    /**
* указываем на то, что метод будет выполнятся перед каждым тестируемым методом 
*/
	public void init1() { test1 = new korporateCalc(); } 
	
    @After
    /**
* указываем на то, что метод будет выполнятся после каждого тестируемого метода 
*/
    public void tearDown1() { test1 = null; } 
    
    @Test
	/**
* создаём метод для теста 
*/
    public void testGet1(){ 
	/**
* тестируемый класс 
*/
    	test1 = new korporateCalc(); 
    	/**
* Проводим неверный тест для входных значений время работы 24 часа, время хранения данных 14 дней, количество камер 2, формат сжатия 0.9, разрешение камеры 1.1 мб в секунду и предполагаемым результатом 1169.44 
*/
    	assertEquals("2505",test1.getP(30, 2, 12, 0.9, 1)); 
	 }
    /**
*указываем на класс для тестирования	 
*/
    private korporateCalc test2;
	
	@Before
    /**
* указываем на то, что метод будет выполнятся перед каждым тестируемым методом 
*/
	public void init2() { test2 = new korporateCalc(); } 
	
    @After
    /**
* указываем на то, что метод будет выполнятся после каждого тестируемого метода 
*/
    public void tearDown2() { test2 = null; } 
    
    @Test
	/**
* создаём метод для теста 
*/
    public void testGet2(){ 
	/**
* тестируемый класс 
*/
    	test2 = new korporateCalc(); 
    	/**
* Проводим верный тест для входных значений время работы 24 часа, время хранения данных 30 дней, количество камер 2, формат сжатия 0.9, разрешение камеры 0.1 мб в секунду и предполагаемым результатом 1169.44 
*/
    	assertEquals("151.88",test2.getP(30, 2, 8, 0.9, 0.1)); 
	 }
    
    /**
*указываем на класс для тестирования	 
*/
    private korporateCalc test3;
	
	@Before
    /**
* указываем на то, что метод будет выполнятся перед каждым тестируемым методом 
*/
	public void init3() { test3 = new korporateCalc(); } 
	
    @After
    /**
* указываем на то, что метод будет выполнятся после каждого тестируемого метода 
*/
    public void tearDown3() { test3 = null; } 
    
    @Test
	/**
* создаём метод для теста 
*/
    public void testGet3(){ 
	/**
* тестируемый класс 
*/
    	test3 = new korporateCalc(); 
    	/**
* Проводим верный тест для входных значений время работы 24 часа, время хранения данных 180 дней, количество камер 1, формат сжатия 0.5, разрешение камеры 0.9 мб в секунду и предполагаемым результатом 1169.44 
*/
    	assertEquals("2847.66",test3.getP(180, 1, 10, 0.5, 0.9)); 
	 }
}